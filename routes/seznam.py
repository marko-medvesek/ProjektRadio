from flask import Blueprint, render_template, jsonify, request, Response
from urllib.parse import urlparse, parse_qs
from datetime import datetime
from time import mktime as unixtime
import aiohttp


bp = Blueprint("seznam", __name__)


seznam = [ #ena pesem je že dodana za testiranje
    {
        "date": "29. January 2015",
        "description": "Provided to YouTube by Rebeat Digital GmbH\n\nGorenjska polka · Ansambel bratov Avsenik\n\nPolka - valček - polka 2\n\n℗ Založba Obzorja d.d., Maribor\n\nReleased on: 2015-01-28\n\nComposer: Slavko Avsenik\nComposer: Vilko Avsenik\nLyricist: Instrumental\n\nAuto-generated by YouTube.",
        "id": "EaRL3co1NQ8",
        "thumbnail": "https://i.ytimg.com/vi/EaRL3co1NQ8/maxresdefault.jpg",
        "title": "Gorenjska polka",
        "url": "https://youtube.com/watch?v=EaRL3co1NQ8",
        "vsecki": 0,
    }
]


@bp.route("/seznam")
def get_seznam():
    return jsonify(seznam)


@bp.route("/seznam/like", methods=["POST"])
def vsecek():
    params = request.get_json()
    for video in seznam:
        if video["id"] == params["id"]:
            video["vsecki"] = int(video["vsecki"]) + 1
            razvrsti()
            print(video["vsecki"])
    return "OK"


def razvrsti():
    seznam.sort(key=lambda x: x["vsecki"], reverse=True)


@bp.route("/seznam/cls", methods=["POST"])
def ponastavi():
    seznam.clear()
    return Response("Success", status=200, mimetype="application/json")


@bp.route("/seznam", methods=["POST"])
async def add_income():
    params = request.get_json()
    if "https://youtu.be/" in params["url"]:
        id = params["url"].split("https://youtu.be/")[1].split("?")[0]
        print(id)
        params["id"] = id
        await getInfo(id)
        return "be", 201
    if "https://www.youtube.com/" or "https://youtube.com/" in params["url"]:
        parsed_url = urlparse(params["url"])
        id = parse_qs(parsed_url.query)["v"][0]
        params["id"] = id
        await getInfo(id)
        return "com", 201
    else:
        print(params["url"])
        return request.get_json(), 406  # Not acceptable - sprejema samo youtube linke


def getSeznam():
    return seznam


async def getInfo(id):
    async with aiohttp.ClientSession() as session:
        async with session.get(
            "https://www.googleapis.com/youtube/v3/videos?part=snippet&id="
            + id
            + "&key=AIzaSyDwEqiktbQNW295zLxA0ItlZEzlJfuZZro"
        ) as response:
            data = await response.json()

    title = data["items"][0]["snippet"]["title"]
    description = data["items"][0]["snippet"]["description"]

    date = data["items"][0]["snippet"]["publishedAt"]
    datum = datetime.strptime(date, "%Y-%m-%dT%H:%M:%SZ").strftime(
        "%d. %B %Y"
    )  # strptime pretvori iz string oblike v date, strftime pa v pravi format
    timestamp = unixtime(datetime.strptime(date, "%Y-%m-%dT%H:%M:%SZ").timetuple())
    thumbnail = ""
    if "maxres" in data["items"][0]["snippet"]["thumbnails"]:
        # print('maxres')
        thumbnail = data["items"][0]["snippet"]["thumbnails"]["maxres"]["url"]

    elif "high" in data["items"][0]["snippet"]["thumbnails"]:  ##else if
        # print('high')
        thumbnail = data["items"][0]["snippet"]["thumbnails"]["high"]["url"]

    elif "medium" in data["items"][0]["snippet"]["thumbnails"]:  ##else if
        # print('medium')
        thumbnail = data["items"][0]["snippet"]["thumbnails"]["medium"]["url"]

    elif "standard" in data["items"][0]["snippet"]["thumbnails"]:  ##else if
        # print('standard')
        thumbnail = data["items"][0]["snippet"]["thumbnails"]["standard"]["url"]

    elif "default" in data["items"][0]["snippet"]["thumbnails"]:  ##else if
        # print('default')
        thumbnail = data["items"][0]["snippet"]["thumbnails"]["default"]["url"]
    povezava = "https://youtube.com/watch?v=" + id
    object = {
        "id": id,
        "title": title,
        "description": description,
        "thumbnail": thumbnail,
        "url": povezava,
        "date": datum,
        "epoch": timestamp,
        "vsecki": 0,
    }
    seznam.append(object)
